{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        },
        {
            "name": "Java",
            "plugin": "Java",
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*\norg.deeplearning4j.datasets.fetchers.MnistDataFetcher\norg.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator\norg.deeplearning4j.nn.api.OptimizationAlgorithm\norg.deeplearning4j.nn.conf.MultiLayerConfiguration\norg.deeplearning4j.nn.conf.NeuralNetConfiguration\norg.deeplearning4j.nn.conf.layers.OutputLayer\norg.deeplearning4j.nn.conf.layers.RBM\norg.deeplearning4j.nn.multilayer.MultiLayerNetwork\norg.deeplearning4j.optimize.api.IterationListener\norg.deeplearning4j.optimize.listeners.ScoreIterationListener\norg.nd4j.linalg.cpu.nativecpu.NDArray\norg.nd4j.linalg.dataset.DataSet\norg.nd4j.linalg.dataset.api.iterator.DataSetIterator\norg.nd4j.linalg.lossfunctions.LossFunctions\norg.slf4j.Logger\norg.slf4j.LoggerFactory\njava.util.Arrays\njava.util.Collections",
            "view": {
                "cm": {
                    "mode": "text/x-java"
                }
            },
            "outdir": "/nethome/kkrishnan8/dl4j-examples-0.5-SNAPSHOT.jar",
            "classPath": "/nethome/kkrishnan8/dl4j-examples-0.5-SNAPSHOT.jar"
        }
    ],
    "cells": [
        {
            "id": "markdownYXpzCB",
            "type": "markdown",
            "body": [
                "# Step 1: Preprocess the files"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeX9C7cH",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "#!/usr/bin/env python",
                    "# -*- coding: utf-8 -*-",
                    "# vim:fenc=utf-8",
                    "",
                    "\"\"\"",
                    "Take some wav files, get the spectrum",
                    "\"\"\"",
                    "from __future__ import division",
                    "import sys",
                    "# import matplotlib.pyplot as plt",
                    "from scipy.fftpack import fft",
                    "from scipy.fftpack import fftfreq",
                    "from scipy.io import wavfile",
                    "import pandas",
                    "import numpy as np"
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 15
        },
        {
            "id": "codeKsAzE1",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "",
                    "'''",
                    "    Split the music into sample_time size pieces.",
                    "    A fourier transform is done over each piece and its output",
                    "    it reported.",
                    "    music: numpy.ndarray the raw music data",
                    "    bitdepth: int the resolution of the wave file",
                    "    bitrate: int the sampling rate of the wave file",
                    "    sample_time: float the size of the peice to analyze",
                    "    return: a list of numpy.ndarray. each array has rows of frequency",
                    "    and amplitude pairs, one array per peice analyzed.",
                    "'''",
                    "def analyze(music, bitdepth=None, bitrate=44100, sample_time=1/6.0):",
                    "    if bitdepth is None:",
                    "        bitdepth = 8 * music.dtype.itemsize",
                    "        # print(\"Automatically picking bit depth as\", bitdepth)",
                    "",
                    "    # Normalize to mono",
                    "    # print(\"Normalizing music to mono\")",
                    "    mono = music",
                    "    if len(music.shape) > 1:",
                    "        mono = np.mean(music, axis = 1)",
                    "",
                    "    # Normalize to [1, 1)",
                    "    # print(\"Normalizing music to standard volume\")",
                    "    normed = mono / (1 << (bitdepth - 1))",
                    "",
                    "    n = len(normed)",
                    "    music_time = n / bitrate",
                    "",
                    "    samples = []",
                    "",
                    "    for sample in range(0, int(np.ceil(music_time / sample_time))):",
                    "        start = int(sample * sample_time * bitrate)",
                    "        end = int(start + sample_time * bitrate)",
                    "        n = end - start",
                    "",
                    "        # print(\"Analyzing [%d, %d)\" % (start, end), file=sys.stderr)",
                    "        # print \"Analyzing [%d, %d)\" % (start, end)",
                    "        spectrum = fft(normed[start:end])",
                    "        spectrum = 2 / n * np.abs(spectrum[0:int(n / 2)])[1:]",
                    "",
                    "        freqs = fftfreq(n, d=(1 / bitrate))[1:int(n/2)]",
                    "",
                    "        lower = None",
                    "        upper = None",
                    "        for i, freq in enumerate(freqs):",
                    "            if freq >= 20 and lower is None:",
                    "                lower = i",
                    "            if freq > 20000 and upper is None:",
                    "                upper = i",
                    "        spectrum = spectrum[lower:upper]",
                    "        freqs = freqs[lower:upper]",
                    "",
                    "        pairs = np.array([freqs, spectrum]).T",
                    "        samples.append(pairs)",
                    "",
                    "    return samples[:-1]",
                    "",
                    "'''",
                    "    Load a wave file into memory.",
                    "    path: string the file path of the wav file",
                    "    return: a tuple (sample rate, wave data)",
                    "'''",
                    "def load_wav(path):",
                    "    return wavfile.read(path)",
                    "",
                    "'''",
                    "    get the middle 30 seconds of the song",
                    "'''",
                    "def middle_30(music, samplerate):",
                    "    samples = 30 * samplerate * len(music.shape)",
                    "    start = int((len(music) / 2) - (samples / 2))",
                    "    stop = int(start + (samples / 2))",
                    "    return music[start:stop, :]",
                    "",
                    "'''",
                    "    Create a test sin wave.",
                    "    This wave is built up of a 50Hz and an 80Hz signal.",
                    "    return: a tuple (sample rate, data)",
                    "'''",
                    "def make_sin():",
                    "    # Number of samplepoints",
                    "    N = 600",
                    "    # sample spacing",
                    "    T = 1.0 / 800.0",
                    "    x = np.linspace(0.0, N*T, N)",
                    "    y = 10 + np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)",
                    "    # print(len(y))",
                    "    sf = 1 / T",
                    "    return sf, y",
                    "",
                    "'''",
                    "    Get the frequency for a given piano key",
                    "'''",
                    "def f(n):",
                    "    return 440 * 2 ** ((float(n)-49) / 12)",
                    "",
                    "ranges = [0] + [f(n + 0.5) for n in range(0,89)]",
                    "log2 = np.log(2)",
                    "thirteenlog2 = 13 * log2",
                    "",
                    "'''",
                    "    Get the piano key for a given frequency",
                    "'''",
                    "def finv(freq):",
                    "    return (12 * np.log(freq/55) + thirteenlog2) / log2",
                    "",
                    "'''",
                    "    sample is an array of (freq, amp)",
                    "'''",
                    "def processSample(sample, id=None):",
                    "    processed = np.zeros(90)",
                    "    for freq, amp in sample:",
                    "        key = min(max(int(np.round((finv(freq)))), 0), 89)",
                    "        processed[key] = processed[key] + amp",
                    "    # print \"Done with sample\", id",
                    "    return processed"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "BeakerDisplay",
                "pluginName": "IPython",
                "shellId": "329C4B8F0E2A42F2826D0EEF56B87376",
                "elapsedTime": 456
            },
            "evaluatorReader": true,
            "lineCount": 118
        },
        {
            "id": "code0jL7qr",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "def process_wave(file_name):",
                    "    sf, music = load_wav('/nethome/kkrishnan8/' + file_name)",
                    "    music = middle_30(music, sf)",
                    "    analysis = analyze(music, bitrate=sf)",
                    "    processed = [processSample(sample, id) for id, sample in enumerate(analysis)]",
                    "    dataFrame = pandas.DataFrame(processed)",
                    "    print(file_name.split('.')[0])",
                    "    dataFrame.to_csv('/nethome/kkrishnan8/' + file_name.split('.')[0] + '.csv', index=False, index_label=False, header=False)"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "BeakerDisplay",
                "pluginName": "IPython",
                "shellId": "329C4B8F0E2A42F2826D0EEF56B87376",
                "elapsedTime": 368
            },
            "evaluatorReader": true,
            "lineCount": 8
        },
        {
            "id": "code9Qutyc",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "process_wave('The Distance.wav')"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "The Distance\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "IPython",
                "shellId": "329C4B8F0E2A42F2826D0EEF56B87376",
                "elapsedTime": 2935,
                "height": 55
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "code3TMgdF",
            "type": "code",
            "evaluator": "Java",
            "input": {
                "body": [
                    "/**",
                    " * ***** NOTE: This example has not been tuned. It requires additional work to produce sensible results *****",
                    " *",
                    " * @author Adam Gibson",
                    " */",
                    "public class DeepAutoEncoderExample {",
                    "",
                    "    private static Logger log = LoggerFactory.getLogger(DeepAutoEncoderExample.class);",
                    "",
                    "    public static void main(String[] args) throws Exception {",
                    "        final int numRows = 28;",
                    "        final int numColumns = 28;",
                    "        int seed = 123;",
                    "        int numSamples = MnistDataFetcher.NUM_EXAMPLES;",
                    "        int batchSize = 1;",
                    "        int iterations = 7;",
                    "        int listenerFreq = iterations/5;",
                    "",
                    "        log.info(\"Load data....\");",
                    "        DataSetIterator iter = new MnistDataSetIterator(batchSize,numSamples,true);",
                    "",
                    "        log.info(\"Build model....\");",
                    "        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()",
                    "                .seed(seed)",
                    "                .iterations(iterations)",
                    "                .optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT)",
                    "                .list()",
                    "                .layer(0, new RBM.Builder().nIn(6).nOut(1000).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(1, new RBM.Builder().nIn(1000).nOut(500).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(2, new RBM.Builder().nIn(500).nOut(250).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(3, new RBM.Builder().nIn(250).nOut(100).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(4, new RBM.Builder().nIn(100).nOut(30).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build()) //encoding stops",
                    "                .layer(5, new RBM.Builder().nIn(30).nOut(100).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build()) //decoding starts",
                    "                .layer(6, new RBM.Builder().nIn(100).nOut(250).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(7, new RBM.Builder().nIn(250).nOut(500).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(8, new RBM.Builder().nIn(500).nOut(1000).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                    "                .layer(9, new OutputLayer.Builder(LossFunctions.LossFunction.SQUARED_LOSS).nIn(1000).nOut(6).build())",
                    "                .pretrain(true).backprop(true)",
                    "                .build();",
                    "",
                    "        MultiLayerNetwork model = new MultiLayerNetwork(conf);",
                    "        model.init();",
                    "        model.setListeners(Collections.singletonList((IterationListener) new ScoreIterationListener(listenerFreq)));",
                    "",
                    "        log.info(\"Train model....\");",
                    "        for (int i = 0; i < 20; i++) {",
                    "            float[] dataArray = {1f, 2f, 3f, 4f, 5f, 6f};",
                    "            NDArray data = new NDArray(dataArray);",
                    "            model.fit(new DataSet(data, data));",
                    "        }",
                    "        while(iter.hasNext()) {",
                    "            DataSet next = iter.next();",
                    "            System.out.println(Arrays.toString(next.getFeatureMatrix().shape()));",
                    "            break;",
                    "            //model.fit(new DataSet(next.getFeatureMatrix(), next.getFeatureMatrix()));",
                    "        }",
                    "",
                    "    }",
                    "",
                    "}",
                    ""
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Error",
                    "object": [
                        "ERROR: 48 compilation error(s)",
                        "",
                        "error at line 20: package org.deeplearning4j.datasets.fetchers does not exist",
                        " import org.deeplearning4j.datasets.fetchers.MnistDataFetcher",
                        "        ^                                                    ^ ",
                        "",
                        "error at line 21: package org.deeplearning4j.datasets.iterator.impl does not exist",
                        " import org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator",
                        "        ^                                                             ^ ",
                        "",
                        "error at line 22: package org.deeplearning4j.nn.api does not exist",
                        " import org.deeplearning4j.nn.api.OptimizationAlgorithm",
                        "        ^                                              ^ ",
                        "",
                        "error at line 23: package org.deeplearning4j.nn.conf does not exist",
                        " import org.deeplearning4j.nn.conf.MultiLayerConfiguration",
                        "        ^                                                 ^ ",
                        "",
                        "error at line 24: package org.deeplearning4j.nn.conf does not exist",
                        " import org.deeplearning4j.nn.conf.NeuralNetConfiguration",
                        "        ^                                                ^ ",
                        "",
                        "error at line 25: package org.deeplearning4j.nn.conf.layers does not exist",
                        " import org.deeplearning4j.nn.conf.layers.OutputLayer",
                        "        ^                                            ^ ",
                        "",
                        "error at line 26: package org.deeplearning4j.nn.conf.layers does not exist",
                        " import org.deeplearning4j.nn.conf.layers.RBM",
                        "        ^                                    ^ ",
                        "",
                        "error at line 27: package org.deeplearning4j.nn.multilayer does not exist",
                        " import org.deeplearning4j.nn.multilayer.MultiLayerNetwork",
                        "        ^                                                 ^ ",
                        "",
                        "error at line 28: package org.deeplearning4j.optimize.api does not exist",
                        " import org.deeplearning4j.optimize.api.IterationListener",
                        "        ^                                                ^ ",
                        "",
                        "error at line 29: package org.deeplearning4j.optimize.listeners does not exist",
                        " import org.deeplearning4j.optimize.listeners.ScoreIterationListener",
                        "        ^                                                           ^ ",
                        "",
                        "error at line 30: package org.nd4j.linalg.cpu.nativecpu does not exist",
                        " import org.nd4j.linalg.cpu.nativecpu.NDArray",
                        "        ^                                    ^ ",
                        "",
                        "error at line 31: package org.nd4j.linalg.dataset does not exist",
                        " import org.nd4j.linalg.dataset.DataSet",
                        "        ^                              ^ ",
                        "",
                        "error at line 32: package org.nd4j.linalg.dataset.api.iterator does not exist",
                        " import org.nd4j.linalg.dataset.api.iterator.DataSetIterator",
                        "        ^                                                   ^ ",
                        "",
                        "error at line 33: package org.nd4j.linalg.lossfunctions does not exist",
                        " import org.nd4j.linalg.lossfunctions.LossFunctions",
                        "        ^                                          ^ ",
                        "",
                        "error at line 10: cannot find symbol",
                        "  symbol:   variable MnistDataFetcher",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "         int numSamples = MnistDataFetcher.NUM_EXAMPLES",
                        "                          ^               ^              ",
                        "",
                        "error at line 16: cannot find symbol",
                        "  symbol:   class DataSetIterator",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "         DataSetIterator iter = new MnistDataSetIterat",
                        "         ^              ^                               ",
                        "",
                        "error at line 16: cannot find symbol",
                        "  symbol:   class MnistDataSetIterator",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "    DataSetIterator iter = new MnistDataSetIterator(batchSize,numSamples,true)",
                        "                               ^                   ^                            ",
                        "",
                        "error at line 19: cannot find symbol",
                        "  symbol:   class MultiLayerConfiguration",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "         MultiLayerConfiguration conf = new NeuralNetConfigura",
                        "         ^                      ^                               ",
                        "",
                        "error at line 31: package OutputLayer does not exist",
                        "                 .layer(9, new OutputLayer.Builder(LossFunctions.LossFunction.SQ",
                        "                               ^                  ^                               ",
                        "",
                        "error at line 31: package LossFunctions does not exist",
                        "yer(9, new OutputLayer.Builder(LossFunctions.LossFunction.SQUARED_LOSS).nIn(1000).nOut(",
                        "                               ^                         ^                               ",
                        "",
                        "error at line 30: package LossFunctions does not exist",
                        "n(500).nOut(1000).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 30: package RBM does not exist",
                        "                 .layer(8, new RBM.Builder().nIn(500).nOut(1000).lossFun",
                        "                               ^          ^                               ",
                        "",
                        "error at line 29: package LossFunctions does not exist",
                        "In(250).nOut(500).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 29: package RBM does not exist",
                        "                 .layer(7, new RBM.Builder().nIn(250).nOut(500).lossFunc",
                        "                               ^          ^                               ",
                        "",
                        "error at line 28: package LossFunctions does not exist",
                        "In(100).nOut(250).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 28: package RBM does not exist",
                        "                 .layer(6, new RBM.Builder().nIn(100).nOut(250).lossFunc",
                        "                               ^          ^                               ",
                        "",
                        "error at line 28: package LossFunctions does not exist",
                        "nIn(30).nOut(100).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())       ",
                        "                               ^                         ^                               ",
                        "",
                        "error at line 28: package RBM does not exist",
                        "                 .layer(5, new RBM.Builder().nIn(30).nOut(100).lossFunct",
                        "                               ^          ^                               ",
                        "",
                        "error at line 28: package LossFunctions does not exist",
                        "nIn(100).nOut(30).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())       ",
                        "                               ^                         ^                               ",
                        "",
                        "error at line 28: package RBM does not exist",
                        "                 .layer(4, new RBM.Builder().nIn(100).nOut(30).lossFunct",
                        "                               ^          ^                               ",
                        "",
                        "error at line 27: package LossFunctions does not exist",
                        "In(250).nOut(100).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 27: package RBM does not exist",
                        "                 .layer(3, new RBM.Builder().nIn(250).nOut(100).lossFunc",
                        "                               ^          ^                               ",
                        "",
                        "error at line 26: package LossFunctions does not exist",
                        "In(500).nOut(250).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 26: package RBM does not exist",
                        "                 .layer(2, new RBM.Builder().nIn(500).nOut(250).lossFunc",
                        "                               ^          ^                               ",
                        "",
                        "error at line 25: package LossFunctions does not exist",
                        "n(1000).nOut(500).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 25: package RBM does not exist",
                        "                 .layer(1, new RBM.Builder().nIn(1000).nOut(500).lossFun",
                        "                               ^          ^                               ",
                        "",
                        "error at line 24: package LossFunctions does not exist",
                        "nIn(6).nOut(1000).lossFunction(LossFunctions.LossFunction.SQUARED_LOSS).build())",
                        "                               ^                         ^                        ",
                        "",
                        "error at line 24: package RBM does not exist",
                        "                 .layer(0, new RBM.Builder().nIn(6).nOut(1000).lossFunct",
                        "                               ^          ^                               ",
                        "",
                        "error at line 22: cannot find symbol",
                        "  symbol:   variable OptimizationAlgorithm",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "             .optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT)",
                        "                               ^                    ^                        ",
                        "",
                        "error at line 19: package NeuralNetConfiguration does not exist",
                        "iLayerConfiguration conf = new NeuralNetConfiguration.Builder()",
                        "                               ^                             ^   ",
                        "",
                        "error at line 35: cannot find symbol",
                        "  symbol:   class MultiLayerNetwork",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "         MultiLayerNetwork model = new MultiLayerNetwork",
                        "         ^                ^                               ",
                        "",
                        "error at line 35: cannot find symbol",
                        "  symbol:   class MultiLayerNetwork",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        " MultiLayerNetwork model = new MultiLayerNetwork(conf)",
                        "                               ^                ^       ",
                        "",
                        "error at line 37: cannot find symbol",
                        "  symbol:   class IterationListener",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "ers(Collections.singletonList((IterationListener) new ScoreIterationListener(l",
                        "                               ^                ^                               ",
                        "",
                        "error at line 37: cannot find symbol",
                        "  symbol:   class ScoreIterationListener",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "onList((IterationListener) new ScoreIterationListener(listenerFreq)))",
                        "                               ^                     ^                 ",
                        "",
                        "error at line 42: cannot find symbol",
                        "  symbol:   class NDArray",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "             NDArray data = new NDArray(dataArray)",
                        "             ^      ^                               ",
                        "",
                        "error at line 42: cannot find symbol",
                        "  symbol:   class NDArray",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "            NDArray data = new NDArray(dataArray)",
                        "                               ^      ^            ",
                        "",
                        "error at line 43: cannot find symbol",
                        "  symbol:   class DataSet",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "             model.fit(new DataSet(data, data))",
                        "                           ^      ^              ",
                        "",
                        "error at line 46: cannot find symbol",
                        "  symbol:   class DataSet",
                        "  location: class com.twosigma.beaker.javash.bkre051fb3c.DeepAutoEncoderExample",
                        "             DataSet next = iter.next()",
                        "             ^      ^                    ",
                        "",
                        ""
                    ]
                },
                "selectedType": "BeakerDisplay",
                "pluginName": "Java",
                "shellId": "e051fb3c-4ef0-4d78-b24a-09418aea1e7c",
                "elapsedTime": 832,
                "height": 81
            },
            "evaluatorReader": true,
            "lineCount": 61
        }
    ],
    "namespace": {}
}
